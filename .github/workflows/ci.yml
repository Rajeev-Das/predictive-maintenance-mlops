name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint and check score
        run: |
          PYTHONPATH=. pylint src/ api.py api_client.py > pylint_result.txt || true
          score=$(grep -Eo "at [0-9.]+/10" pylint_result.txt | grep -Eo "[0-9.]+" | tail -1)
          echo "Pylint score: $score"
          if [ -z "$score" ]; then
            echo "No Pylint score detected! Failing build."
            cat pylint_result.txt
            exit 1
          fi
          awk -v s="$score" 'BEGIN{exit (s<5.0)?1:0}'
          if [ $? -ne 0 ]; then
            echo "Pylint score ${score} is below 5.0!"
            cat pylint_result.txt
            exit 1
          fi
          cat pylint_result.txt

      - name: Unit and integration tests (pytest)
        env:
          CI: true
        run: |
          pip install pytest
          PYTHONPATH=. pytest --maxfail=3 --disable-warnings -q

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub (optional)
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/predictive-maintenance-api:latest
